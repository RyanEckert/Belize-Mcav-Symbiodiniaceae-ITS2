plot.background = element_rect(fill = "white"),
legend.position = "bottom",
legend.background = element_rect(color = "black"),
plot.margin = unit(c(0.5, 0.1, 0.1, 0.61), "cm")
)
its2RichPlotSite
richDkmc = kruskalmc(its2Div$richness ~ its2Div$Depth) # multiple-comparison test
print(richDkmc)
richDkmcDiff = richDkmc$dif.com$difference # select logical vector
names(richDkmcDiff) = row.names(richDkmc$dif.com)# add comparison names
# create a list with "homogenous groups" coded by letter
richDsigLetters = multcompLetters(richDkmcDiff, compare="<", threshold=0.05,
Letters=c(letters, LETTERS, "."), reversed = FALSE)
richLetters = as.data.frame(richDsigLetters$Letters)
richLetters$depth = row.names(richLetters)
colnames(richLetters)[1] = "id"
richLetters$y = c(1, 1, 1, 1)
head(richLetters)
its2RichPlotD = ggplot(data = its2Div, aes(x = Depth, y = richness)) +
geom_point(aes(fill = Site), shape = 21, color = "gray 20", size = 2,
position = position_jitterdodge()) +
geom_boxplot(alpha = 0, outlier.shape = NA, color = "gray30") +
scale_fill_manual(values = its2ColPal[c(8,5,3,9)],
labels = c("Tobacco Reef", "Raph's Wall",
"South Reef", "Gover's Reef")) +
stat_compare_means(size = 5, geom = "label", label.x = 1.07,
label.y = 10.7) +
geom_text(data = richLetters, aes(x = depth, y = y, label = id),
size = 6) +
coord_cartesian( ylim = c(1, 11)) +
scale_y_continuous(breaks = seq(2, 10, 2))+
xlab("Depth (m)") +
ylab("Richness") +
guides(fill=guide_legend(ncol=2))+
theme_bw()
its2RichPlotDepth = its2RichPlotD +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12),
panel.border = element_rect(size = 1.1, color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.position = "bottom",
legend.background = element_rect(color = "black"),
plot.margin = unit(c(0.5, 0.5, 0.1, 0.85), "cm")
)
its2RichPlotDepth
get_legend <- function(its2RichPlotSite) {
tmp <- ggplot_gtable(ggplot_build(its2RichPlotSite))
leg <-
which(sapply(tmp$grobs, function(x)
x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend.site = get_legend(its2RichPlotSite)
get_legend = function(its2RichPlotDepth) {
tmp <- ggplot_gtable(ggplot_build(its2RichPlotDepth))
leg <-
which(sapply(tmp$grobs, function(x)
x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend.depth = get_legend(its2RichPlotDepth)
# re-plot without legends
its2RichPlotSite = its2RichPlotSite + theme(legend.position = "none")
its2RichPlotDepth = its2RichPlotDepth + theme(legend.position = "none")
its2ShannonPlotS = ggplot(data = its2Div, aes(x = Site, y = shannon)) +
geom_point(aes(fill = Depth), shape = 21, color = "gray20",
size = 2, position = position_jitterdodge()) +
geom_boxplot(alpha = 0, outlier.shape = NA, color = "gray30") +
scale_fill_manual(values = its2ColPal[c(1, 4, 6, 2)],
labels = c("10 m", "16 m", "25 m", "35 m")) +
stat_compare_means(size = 5, geom = "label", label.x = 1,
label.y = 1.7) +
expand_limits(y = c(0, 1.75)) +
xlab("Reef Site") +
ylab("Shannon's index") +
theme_bw()
its2ShannonPlotSite = its2ShannonPlotS +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12),
panel.border = element_rect(size = 1.1, color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.position = "none",
legend.background = element_rect(color = "black"),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.5), "cm")
)
its2ShannonPlotSite
its2ShannonPlotD = ggplot(data = its2Div, aes(x = Depth, y = shannon))+
geom_point(aes(fill = Site), shape = 21, color = "gray20", size = 2,
position = position_jitterdodge()) +
geom_boxplot(alpha = 0, outlier.shape = NA, color = "gray30") +
scale_fill_manual(values = its2ColPal[c(8,5,3,9)],
labels = c("Tobacco Reef", "Raph's Wall",
"South Reef", "Gover's Reef")) +
stat_compare_means(size = 5, geom = "label", label.x = 1,
label.y = 1.7) +
expand_limits(y = c(0, 1.75)) +
xlab("Depth (m)") +
ylab("Shannon's index") +
theme_bw()
its2ShannonPlotDepth = its2ShannonPlotD +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12),
panel.border = element_rect(size = 1.1, color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.position = "none",
legend.background = element_rect(color = "black"),
plot.margin = unit(c(0.1, 0.5, 0.1, 0.85), "cm")
)
its2ShannonPlotDepth
its2SimpsonPlotS = ggplot(data = its2Div, aes(x = Site, y = simpson)) +
geom_point(aes(fill = Depth), shape = 21, color = "gray20", size = 2,
position = position_jitterdodge()) +
geom_boxplot(alpha = 0, outlier.shape = NA) +
scale_fill_manual(values = its2ColPal[c(1,4,6,2)],
labels = c("10 m", "16 m", "25 m", "35 m")) +
stat_compare_means(size = 5, geom = "label", label.x = 1,
label.y = 0.77) +
expand_limits(y = c(0, 0.8)) +
xlab("Reef Site") +
ylab("Simpson's index") +
theme_bw()
its2SimpsonPlotSite = its2SimpsonPlotS +
theme(axis.title.x = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12),
panel.border = element_rect(size = 1.1, color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.position = "none",
legend.background = element_rect(color = "black"),
plot.margin = unit(c(0.11, 0.1, 0, 0.5), "cm")
)
its2SimpsonPlotSite
its2SimpsonPlotD = ggplot(data = its2Div, aes(x = Depth, y = simpson)) +
geom_point(aes(fill = Site), shape = 21, color = "gray20", size = 2,
position = position_jitterdodge()) +
geom_boxplot(alpha = 0, outlier.shape = NA) +
scale_fill_manual(values = its2ColPal[c(8,5,3,9)],
labels = c("Tobacco Reef", "Raph's Wall",
"South Reef", "Gover's Reef")) +
stat_compare_means(size = 5, geom = "label", label.x = 1,
label.y = 0.77) +
expand_limits(y = c(0, 0.8)) +
xlab("Depth (m)") +
ylab("Simpson's index") +
theme_bw()
its2SimpsonPlotDepth = its2SimpsonPlotD +
theme(axis.title.x = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 12),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 12),
panel.border = element_rect(size = 1.1, color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.position = "none",
legend.background = element_rect(color = "black"),
plot.margin = unit(c(0.1, 0.5, 0, 0.85), "cm")
)
its2SimpsonPlotDepth
divPlots = ggarrange(its2RichPlotSite, its2RichPlotDepth, its2ShannonPlotSite,
its2ShannonPlotDepth, its2SimpsonPlotSite, its2SimpsonPlotDepth,
legend.site, legend.depth, ncol = 2, nrow = 4, widths = c(3.5,3.4),
heights = c(3,3,3.4,1),
labels = c("a","b", "c", "d", "e", "f","",""),
font.label = list(size = 18, color = "black", face ="bold")
)
divPlots
ggsave("its2_diversityPlots.eps", plot = divPlots, width = 8.25, height = 10,
unit = "in", dpi = 600)
plot(divPlots)
its2Dist = vegdist(its2Norm[, c(4:ncol(its2Norm))], method = "bray")
its2Mds = cmdscale(its2Dist, eig = TRUE, x.ret = TRUE)
its2Var = round(its2Mds$eig/sum(its2Mds$eig)*100, 1)
its2Var
its2Values = its2Mds$points
its2Values =as.data.frame(its2Values, sample = rownames(its2Values))
its2Pcoa = data.frame(sample = rownames(its2Values), site = as.factor(its2Norm$Site),
depth = as.factor(its2Norm$Depth),PCo1 = its2Values[,1],
PCo2 = its2Values[,2])
head(its2Pcoa)
its2PcoaA = ggplot(its2Pcoa, aes(x = PCo1, y = PCo2)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
geom_point(aes(shape = factor(depth), size = depth, fill = site),
color = "black") +
scale_fill_manual(values = its2ColPal[c(8,5,3,9)], name = "Reef Site",
labels = c("Tobacco Reef", "Raph's Wall", "South Reef",
"Glover's Reef")) +
scale_shape_manual(values = c(24,23,22,21), name = "Depth",
labels = c("10 m", "16 m", "25 m", "35 m")) +
scale_size_manual(values = c(4, 4.75, 4.75, 4.75)) +
guides(shape = guide_legend(override.aes = list(size = c(4, 4.75, 4.75, 4.75),
fill = "white")), fill = guide_legend(override.aes =
list(shape = 22, size = 5.75, color = "white")),	size = FALSE,
color = FALSE)+
xlab(paste ("PCo 1 (", its2Var[1],"%)", sep = "")) +
ylab(paste ("PCo 2 (", its2Var[2],"%)", sep = "")) +
theme_bw()
its2Pcoa = its2PcoaA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
its2PcoaA
ggsave("ITS2_OTU_PCoA.eps", plot = its2Pcoa, width = 10, height = 6.25, dpi = 600,
device="eps")
plot(its2Pcoa)
its2Nmds = metaMDS(its2Norm[4:ncol(its2Norm)], try = 50)
its2Nmds
its2Scores = as.data.frame(scores(its2Nmds))
its2Scores$site = factor(its2Norm$Site)
its2Scores$depth = as.factor(its2Norm$Depth)
its2Scores$sample = row.names(its2Scores)
head(its2Scores)
its2Clades = as.data.frame(scores(its2Nmds,"species"))
its2Clades$seq = row.names(its2Clades)
its2Clades
its2Clades$seq
its2NmdsPlotA = ggplot() +
geom_point(data = its2Scores, aes(x = NMDS1, y = NMDS2,
shape = depth, size = depth, fill = site),
color = "black") + # add the site points
scale_fill_manual(values = its2ColPal[c(8,5,3,9)],
name = "Reef Site", labels = c("Tobacco Reef",
"Raph's Wall", "South Reef", "Glover's Reef")) +
scale_shape_manual(values = c(24, 23, 22, 21), name = "Depth",
labels = c("10 m", "16 m", "25 m", "35 m")) +
scale_size_manual(values = c(3, 3.75, 3.75, 3.75)) +
guides(shape = guide_legend( override.aes = list(size =
c(3, 3.75, 3.75, 3.75), fill = "white")), fill =
guide_legend(override.aes = list(shape = 22, size = 3.75,
color = NA)), size = FALSE)+
geom_text(data = its2Clades, aes(x = NMDS1, y = NMDS2,
label = seq),
color = "#000000", size = 4, fontface = "italic") +
# add seq labels
annotate("label", x = 1.25, y = 0.725, label = paste
("Distance = Bray-Curtis\nStress = ",
round(its2Nmds$stress, 4), sep = ""), size = 4) +
labs(x = "nMDS1", y = "nMDS2") +
coord_equal() +
theme_bw()
its2NmdsPlot = its2NmdsPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
legend.background = element_blank(),
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_blank()
)
its2NmdsPlot
ggsave("nMDS_ITS2_OTU.eps", plot = its2NmdsPlot, width = 8, height = 5, dpi = 600,
device = "eps")
plot(its2NmdsPlot)
itsOuts = its2Norm[its2Norm$sample %in% c("42", "80", "104", "98", "20", "57",
"149", "152", "58", "163"), ]
itsOuts$sums = apply(itsOuts[,4:13], 1, function(x) sum(x))
itsNoOut = its2Norm
itsNoOut <- itsNoOut[!itsNoOut$sample %in% c("42", "80", "104", "98", "20", "57",
"149", "152", "58", "163"), ]
itsNoOut$sums <- apply(itsNoOut[,4:13], 1, function(x) sum(x))
itsOuts
max(itsOuts$sum)
max(itsNoOut$sum)
mean(itsNoOut$sum)
summary(itsOuts$sum)
summary(itsNoOut$sum)
its2Nmds2 = metaMDS(itsNoOut[4:ncol(itsNoOut)], try = 50)
its2Nmds2
its2Scores2 = as.data.frame(scores(its2Nmds2))
its2Scores2$site = factor(itsNoOut$Site)
its2Scores2$depth = as.factor(itsNoOut$Depth)
its2Scores2$sample = row.names(its2Scores2)
head(its2Scores2)
its2Clades2 = as.data.frame(scores(its2Nmds2,"species"))
its2Clades2$seq = row.names(its2Clades2)
its2Clades2
its2Clades2$seq
## Plot the data
its2NmdsPlotB = ggplot() +
geom_point(data = its2Scores2, aes(x = NMDS1, y = NMDS2,
shape = depth, size = depth, fill = site),
color = "black") + # add the site points
scale_fill_manual(values = its2ColPal[c(8,5,3,9)], name =
"Reef Site",labels = c("Tobacco Reef",
"Raph's Wall", "South Reef", "Glover's Reef")) +
scale_shape_manual(values = c(24, 23, 22, 21), name = "Depth",
labels = c("10 m", "16 m", "25 m", "35 m")) +
scale_size_manual(values = c(3, 3.75, 3.75, 3.75)) +
guides(shape = guide_legend( override.aes = list(size =
c(3, 3.75, 3.75, 3.75), fill = "white")), fill =
guide_legend(override.aes = list(shape = 22, size = 3.75,
color = NA)), size = FALSE)+
geom_text(data = its2Clades2, aes(x = NMDS1, y = NMDS2,
label = seq), color = "#000000", size = 4,
fontface = "italic") +
# add seq labels
annotate("label", x = 0.95, y = 1.17, label = paste
("Distance = Bray-Curtis\nStress = ",
round(its2Nmds2$stress, 4), sep = ""), size = 4) +
labs(x = "nMDS1", y = "nMDS2") +
coord_equal() +
theme_bw()
its2NmdsPlot2 = its2NmdsPlotB +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
legend.background = element_blank(),
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_blank()
)
its2NmdsPlot2
# saving new nMDS plot
ggsave("nMDS_ASVs_noOut.eps", plot = its2NmdsPlot2, width = 9.2, height = 5.75,
dpi = 600, device = "eps")
plot(its2NmdsPlot2)
head(its2Norm)
its2NormPerc = its2Norm
its2NormPerc$sum = apply(its2NormPerc[, c(4:length(its2NormPerc[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
its2NormPerc = cbind(its2NormPerc[, c(1:3)], (its2NormPerc[,
c(4:(ncol(its2NormPerc)-1))] / its2NormPerc$sum))
head(its2NormPerc)
# test that all are now 100% = 1
apply(its2NormPerc[, c(4:(ncol(its2NormPerc)))], 1, function(x) {
sum(x, na.rm = T)
})
its2ra = its2NormPerc
sampleCounts = count(its2ra, c('Site','Depth'))
meltedList = melt(lapply(sampleCounts$freq,function(x){c(1:x)}))
its2ra$barPlotOrder = meltedList$value
colnames(its2ra)[c(5:ncol(its2ra)-1)] = c("sq01_C3", "sq10_C3", "sq11_C3g","sq14_C3g", "sq17_C3g",
"sq18_C3g", "sq25_C3g", "sq05_C3z", "sq07_C3e",
"sq08_C3g")
its2ra=its2ra[c(1,ncol(its2ra),2:(ncol(its2ra)-1))]
head(its2ra)
gss = otuStack(its2ra, count.columns = c(5:length(its2ra[1, ])),
condition.columns = c(1:4))[1:2330,] # remove summ rows
levels(gss$otu)
gss$otu = factor(gss$otu, levels(gss$otu)[c(1:8, 11, 9, 10)])
levels(gss$otu)
levels(gss$Depth)
levels(gss$Depth) = c("10 m", "16 m", "25 m", "35 m")
levels(gss$Site)
levels(gss$Site) = c("Tobacco Reef", "Raph's Wall", "South Reef", "Glover's Reef")
levels(gss$Depth)
levels(gss$Site)
OTUplotA = ggplot(gss, aes(x = barPlotOrder, y = count, fill = factor(otu))) +
geom_bar(position = "stack", stat = "identity", color = "black",
size = 0.25) +
ylab("Normalized proportion") +
scale_fill_manual(values=its2ColPal)+
labs(fill = "OTU_Clade type") +
facet_grid(Depth ~ Site, scales = "free_x") + #faceting plots by Depth and Site
theme_bw()
OTUplot = OTUplotA +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
legend.background = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "white"),
plot.background = element_blank(),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12),
strip.background = element_rect(fill = "white", size = 0.9)
)
OTUplot
ggsave("OTUbarPlot2.eps", plot = OTUplot, width = 8, height = 6, unit = "in",
dpi = 600)
plot(OTUplot)
anova(betadisper(its2Dist, its2Norm$Depth))
its2Adonis = adonis(its2Norm[, c(4:ncol(its2Norm))] ~ Depth*Site,
data = its2Norm, permutations = 9999, method = "bray")
its2Adonis
its2PWAdonis = pairwise.adonis(its2Norm[, c(4:ncol(its2Norm))],
factors = its2Norm$Depth, sim.method = "bray",
p.adjust.m = "BH", perm = 9999)
its2PWAdonis
goods2 = subset(goods, !Depth=="35")
goods2[] = lapply(goods2, function(x) if(is.factor(x)) factor(x) else x)
summary(goods2)
itsgoods2Transposed = t(goods2[, 5:length(goods2[1, ])])
itsgoods2List = DGEList(counts = itsgoods2Transposed)
head(itsgoods2List$samples)
its2Norm2 =  calcNormFactors(itsgoods2List, method = "TMM")
head(its2Norm2$samples)
its2TMM = t(cpm(its2Norm2, Normalized.lib.sizes = TRUE))
its2Norm2 = cbind(goods2[,c(2:4)], its2TMM)
head(its2Norm2)
its2Dist2 = vegdist(its2Norm2[, c(4:ncol(its2Norm2))], method = "bray")
anova(betadisper(its2Dist2, its2Norm2$Depth))
its2Adonis2 <- adonis(its2Norm2[, c(4:ncol(its2Norm2))] ~ Depth*Site,
data = its2Norm2, permutations = 9999, method = "bray")
its2Adonis2
its2PWAdonis2 = pairwise.adonis(its2Dist2, factors = its2Norm2$Depth,
perm = 9999, p.adjust.m = "BH")
its2PWAdonis2
its2Glm = its2Norm
colnames(its2Glm)[4:ncol(its2Glm)] = c("sq01_C3", "sq10_C3", "sq11_C3g",
"sq14_C3g", "sq17_C3g", "sq18_C3g",
"sq25_C3g", "sq05_C3z", "sq07_C3e",
"sq08_C3g")
glmStack=otuStack(data=its2Glm, count.columns = c(4:ncol(its2Glm)),
condition.columns=c(1:3))
levels(glmStack$otu)
glmStack$otu = factor(glmStack$otu, levels(glmStack$otu)[c(1:8, 11, 9, 10)])
levels(glmStack$otu)
glmStack$count = round(glmStack$count, 0)
head(glmStack)
its2MmD = mcmc.otu(fixed = "Depth", data = glmStack,
nitt=100000, thin=25, burnin=5000)
ssD = OTUsummary(its2MmD, glmStack, summ.plot = FALSE)
ssD = padjustOTU(ssD)
sigsD = signifOTU(ssD)
ss2D = OTUsummary(its2MmD, glmStack, otus = sigsD, whiskers = "sd",
ptype = "mcmc")
its2MCMCglmD = ss2D$summary
levels(its2MCMCglmD$otu)
its2MCMCglmD$Depth = as.factor(its2MCMCglmD$Depth)
its2MCMCglmD$otu = factor(its2MCMCglmD$otu, levels = c("sq01_C3", "sq10_C3",
"sq14_C3g", "sq17_C3g", "sq18_C3g", "sq25_C3g",
"sq08_C3g", "sq07_C3e"))
ssD$otuWise[sigsD]
pd = position_dodge(0.3)
its2glmPlotA = ggplot(its2MCMCglmD, aes(x = Depth, y = mean, group = otu,
colour =otu))+
geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
lwd = 0.6, width = 0.5, 	position = pd) +
geom_line(aes(group = otu), lwd = 0.6, position = pd)+
geom_point(aes(group = otu), position = pd, size = 2.5)+
scale_color_manual(values = its2ColPal[c(1,2,4:8,10)],
name = "OTU_Clade type") +
xlab("Depth")+
ylab("log10(proportion)") +
theme_bw()
its2glmPlotD = its2glmPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
legend.background = element_blank(),
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_blank()
)
its2glmPlotD
ggsave("its2glmDepth.eps", plot=its2glmPlotD, width = 8, height = 6, dpi = 600)
plot(its2glmPlotD)
