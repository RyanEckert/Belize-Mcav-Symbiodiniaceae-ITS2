# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
curated_result_97 = readRDS("curated_result_97.rds")
ITS2data <- read.csv("ASVtable.csv")
head(ITS2data)
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
```{r setup chunk, setup, include = TRUE, cache=TRUE, message=TRUE, warning=TRUE}
```{r setup chunk, setup, include = TRUE, cache=TRUE, message=TRUE, warning=TRUE}
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
```{r setup chunk, setup, include = TRUE, cache=FALSE, message=TRUE, warning=TRUE}
```{r setup chunk, setup, include = TRUE, cache=FALSE, message=TRUE, warning=FALSE}
?rmd
```{r setup chunk, setup, include = TRUE, cache = FALSE, message = FALSE, warning = FALSE}
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
curated_result_97 = readRDS("curated_result_97.rds")
ITS2data <- read.csv("ASVtable.csv")
head(ITS2data)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
```{r pressure, echo=FALSE}
# install/load packages
# if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library
if(!require("pairwiseAdonis")) pacman::p_load_gh('pmartinezarbizu/pairwiseAdonis/pairwiseAdonis')
pacman::p_load(BiocManager, car, cluster,  cowplot, devtools, dunn.test, edgeR, forcats, ggfortify, ggplot2, ggpubr, gridExtra, labdsv, MASS, MCMC.OTU, multcompView, pgirmess, vegan, pairwiseAdonis)
#setting seed allows randomized processes to be repeated later
set.seed(3254)
its2ColPal=c("#0081EF", "#00B0F6", "#00BFC4", "#39B600", "#9590FF", "#E76BF3",
"#FF62BC", "#F8766D", "#D89000", "#A3A500")
pie()
pie(its2ColPal)
pie(10,its2ColPal)
pie(1,length(its2ColPal), col = its2ColPal)
pie(rep(1,length(its2ColPal)), col = its2ColPal)
head(ITS2data)
#This is what the palette looks like in sequence
pie(rep(1,length(its2ColPal)), col = its2ColPal)
pie(rep(1,length(its2ColPal)), col = its2ColPal)
ITS2data$Depth = factor(ITS2data$Depth, levels = c("10", "16", "25", "35"))
levels(ITS2data$Site)
ITS2data$Site = factor(ITS2data$Site, levels(ITS2data$Site)[c(4, 2, 3, 1)])
ITS2data = ITS2data[order(ITS2data$Site, ITS2data$Depth), ]
ITS2data$newOrder = 1:nrow(ITS2data)
ITS2data = cbind(ITS2data[, length(ITS2data), drop = FALSE],
ITS2data[, c(1:length(ITS2data) - 1)])
row.names(ITS2data) = ITS2data$Sample
head(ITS2data)
goods = purgeOutliers(ITS2data, count.columns = 5:length(ITS2data),
otu.cut = 0.001)
goods$newOrder = 1:nrow(goods)
row.names(goods) = goods$sample
head(goods)
#write.csv(goods, "goodsASV.csv", row.names = FALSE) #save your good ASVs to the disk
#goods = read.csv("goodsASV.csv") #loading in the previously exported ASVs
row.names(goods) = goods$sample
# what is the proportion of samples with data for these ASVs?
withData = apply(goods[, 5:length(goods[1, ])], 2,
function(x)
{
sum(x > 0)/length(x)
}
)
hist(withData, breaks = 50)
props = apply(goods[, 5:length(goods[1, ])], 2,
function(x)
{
sum(x)/sum(goods[, 5:length(goods[1, ])])
}
)
barplot(props, xaxt = "n", log = "y")
props
# normalize otu counts with weighted trimmed mean of M-values (TMM; Robinson and
# Oshlack 2010)
itsGoodsTransposed = t(goods[, 5:length(goods[1, ])])
itsGoodsList = DGEList(counts = itsGoodsTransposed)
head(itsGoodsList$samples)
its2Norm =  calcNormFactors(itsGoodsList, method = "TMM")
head(its2Norm$samples)
its2TMM = t(cpm(its2Norm, normalized.lib.sizes = TRUE))
its2Norm = cbind(goods[,c(2:4)], its2TMM)
head(its2Norm)
#write.csv(its2Norm, "its2_NormalizedGoods.csv", row.names = FALSE)
#its2Norm = read.csv("its2_NormalizedGoods.csv")
# renaming sequence coulmns to include Clade types identified with Blast-n
colnames(its2Norm)[4:ncol(its2Norm)] = c("sq01_C3", "sq10_C3", "sq11_C3g",
"sq14_C3g", "sq17_C3g", "sq18_C3g", "sq25_C3g", "sq05_C3z", "sq07_C3e",
"sq08_C3g")
its2Norm$Site = factor(its2Norm$Site, levels(its2Norm$Site)[c(4, 2, 3, 1)])
its2Norm$Depth = as.factor(its2Norm$Depth)
head(its2Norm)
its2Norm$Site
its2Norm$Depth
#write.csv(its2Norm, "its2_NormalizedGoods.csv", row.names = FALSE)
#its2Norm = read.csv("its2_NormalizedGoods.csv")
# renaming sequence coulmns to include Clade types identified with Blast-n
colnames(its2Norm)[4:ncol(its2Norm)] = c("sq01_C3", "sq10_C3", "sq11_C3g",
"sq14_C3g", "sq17_C3g", "sq18_C3g", "sq25_C3g", "sq05_C3z", "sq07_C3e",
"sq08_C3g")
colnames(its2Norm)
colnames(its2Norm)[4:ncol(its2Norm)]
goods = purgeOutliers(ITS2data, count.columns = 5:length(ITS2data),
otu.cut = 0.001)
goods$newOrder = 1:nrow(goods)
row.names(goods) = goods$sample
head(goods)
ITS2data = cbind(ITS2data[, 1:3], data.frame(t(curated_result_97$curated_table)))
head(ITS2data)
ITS2data$Depth = factor(ITS2data$Depth, levels = c("10", "16", "25", "35"))
curated_result_97 = readRDS("curated_result_97.rds") #read in LULU output
ITS2data <- read.csv("ASVtable.csv") #read in dada2 output
head(ITS2data)
ITS2data = cbind(ITS2data[, 1:3], data.frame(t(curated_result_97$curated_table)))
ITS2data$Depth = factor(ITS2data$Depth, levels = c("10", "16", "25", "35"))
levels(ITS2data$Site)
ITS2data$Site = factor(ITS2data$Site, levels(ITS2data$Site)[c(4, 2, 3, 1)])
ITS2data = ITS2data[order(ITS2data$Site, ITS2data$Depth), ]
ITS2data$newOrder = 1:nrow(ITS2data)
ITS2data = cbind(ITS2data[, length(ITS2data), drop = FALSE],
ITS2data[, c(1:length(ITS2data) - 1)])
row.names(ITS2data) = ITS2data$Sample
head(ITS2data)
goods = purgeOutliers(ITS2data, count.columns = 5:length(ITS2data),
otu.cut = 0.001)
goods$newOrder = 1:nrow(goods)
row.names(goods) = goods$sample
head(goods)
#write.csv(goods, "goodsASV.csv", row.names = FALSE) #save your good ASVs to the disk
#goods = read.csv("goodsASV.csv") #loading in the previously exported ASVs
row.names(goods) = goods$sample
# what is the proportion of samples with data for these ASVs?
withData = apply(goods[, 5:length(goods[1, ])], 2,
function(x)
{
sum(x > 0)/length(x)
}
)
hist(withData, breaks = 50)
props = apply(goods[, 5:length(goods[1, ])], 2,
function(x)
{
sum(x)/sum(goods[, 5:length(goods[1, ])])
}
)
barplot(props, xaxt = "n", log = "y")
props
