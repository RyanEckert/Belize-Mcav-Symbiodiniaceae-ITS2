edu
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(vitae)
library(rorcid)
ORCID_TOKEN="50bc04f0-5342-4f86-badf-86db472ef431"
edu <- rorcid::orcid_educations("0000-0002-3010-9395")
edu$`0000-0002-3010-9395`$`education-summary` %>%
detailed_entries(
what = `role-title`,
when = glue::glue("{`start-date.year.value`} - {`end-date.year.value`}"),
with = organization.name,
where = organization.address.city
)
edu$`0000-0002-3010-9395`$`last-modified-date`
edu$`0000-0002-3010-9395`$`affiliation-group`
edu$`0000-0002-3010-9395`$path
/0000-0002-3010-9395/educations
/0000-0002-3010-9395/educations
0000-0002-3010-9395/educations
edu
summary(/0000-0002-3010-9395/educations)
summary(0000-0002-3010-9395/educations)
summary("0000-0002-3010-9395/educations")
0000-0002-3010-9395/educations
0000-0002-3010-9395
as.orcid(x = "0000-0002-3010-9395")
(out <- works(orcid_id("0000-0002-3010-9395")))
(out <- education(orcid_id("0000-0002-3010-9395")))
(out <- educations(orcid_id("0000-0002-3010-9395")))
(out <- orcid_educations(orcid_id("0000-0002-3010-9395")))
(out <- orcid_educations(orcid_id("0000-0002-3010-9395")))
orcid_educations("0000-0002-3010-9395")
orcid_educations("0000-0002-3010-9395", format = "application/orcid+mml")
orcid_educations("0000-0002-3010-9395", format = "application/orcid+xml")
orcid_educations("0000-0002-3010-9395", format = "application/orcid+xml;qs=3")
orcid_educations("0000-0002-3010-9395", format = "application/orcid+xml; qs=3")
edu = orcid_educations("0000-0002-3010-9395", format = "application/orcid+xml; qs=3")
names(edu$`0000-0002-3010-9395`)
edu = orcid_educations("0000-0002-3010-9395", format = "application/vnd.orcid+xml; qs=5")
names(edu$`0000-0002-3010-9395`)
edu
edu = orcid_educations("0000-0002-3010-9395", format = "application/vnd.citationstyles.csl+json")
res <- orcid_educations(orcid = "0000-0002-1642-628X")
res$`0000-0002-1642-628X`
names(res$`0000-0002-1642-628X`)
res$`0000-0002-1642-628X`$`education-summary
``
``
res <- orcid_educations(orcid = "0000-0002-1642-628X")
res$`0000-0002-1642-628X`
names(res$`0000-0002-1642-628X`)
res$`0000-0002-1642-628X`$`education-summary
`
orcid_educations(orcid = "0000-0002-1642-628X", 148494)
edu$`0000-0002-3010-9395`$`organization`
edu = orcid_educations("0000-0002-3010-9395")
edu$`0000-0002-3010-9395`$`organization`
pubs = works("0000-0002-3010-9395")
pubs
pubs$`0000-0002-3010-9395`
pubs$`0000-0002-3010-9395`$publication-date
pubs
pubs$title.subtitle
pubs$`journal-title.value`
orcid_auth
orcid_auth()
orcid_works()
orcid_works("0000-0002-3010-9395")
pubs = orcid_works("0000-0002-3010-9395")
names(pubs$`0000-0002-3010-9395`)
names(pubs$`0000-0002-3010-9395`$works)
edu <- do.call("rbind",
rorcid::orcid_educations("0000-0001-6729-7695")$`0000-0001-6729-7695`$`affiliation-group`$summaries
)
edu
edu <- do.call("rbind",
rorcid::orcid_educations("0000-0001-6729-7695")$`0000-0001-6729-7695`$`affiliation-group`$summaries
)
edu %>%
detailed_entries(
what = `education-summary.role-title`,
when = glue::glue("{`education-summary.start-date.year.value`} - {`education-summary.end-date.year.value`}"),
with = `education-summary.organization.name`,
where = organization.address.city
)
edu <- do.call("rbind",
rorcid::orcid_educations("0000-0001-6729-7695")$`0000-0001-6729-7695`$`affiliation-group`$summaries
)
edu %>%
detailed_entries(
what = `education-summary.role-title`,
when = glue::glue("{`education-summary.start-date.year.value`} - {`education-summary.end-date.year.value`}"),
with = `education-summary.organization.name`,
where = `organization.address.city`
)
edu$`education-summary.organization.address.city`
edu <- do.call("rbind",
rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
)
rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
)
rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
edu <- do.call("rbind", rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
)
rbind()
?rbind
edu <- rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
edu %>%
detailed_entries(
what = `education-summary.role-title`,
when = glue::glue("{`education-summary.start-date.year.value`} - {`education-summary.end-date.year.value`}"),
with = `education-summary.organization.name`,
where = `education-summary.organization.address.city`
)
edu <- rbind(rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
)
edu %>%
detailed_entries(
what = `education-summary.role-title`,
when = glue::glue("{`education-summary.start-date.year.value`} - {`education-summary.end-date.year.value`}"),
with = `education-summary.organization.name`,
where = `education-summary.organization.address.city`
)
edu <- rbind(rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
+ )
edu <- rbind(rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries)
edu
edu %>%
detailed_entries(
what = `education-summary.role-title`,
when = glue::glue("{`education-summary.start-date.year.value`} - {`education-summary.end-date.year.value`}"),
with = `education-summary.organization.name`,
where = `education-summary.organization.address.city`
)
edu <- rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
edu %>%
detailed_entries(
what = `education-summary.role-title`,
when = glue::glue("{`education-summary.start-date.year.value`} - {`education-summary.end-date.year.value`}"),
with = `education-summary.organization.name`,
where = `education-summary.organization.address.city`
)
detailed_entries(
what = edu$`0000-0002-3010-9395`$`education-summary.role-title`)
detailed_entries(edu,
what = edu$`0000-0002-3010-9395`$`education-summary.role-title`
)
orcid_auth()
?orcid_auth
orcid_data <- do.call("rbind",
rorcid::orcid_educations("0000-0002-2140-5352")$`0000-0002-2140-5352`$`affiliation-group`$summaries
)
orcid_data
orcid_data <- do.call("rbind",
rorcid::orcid_educations("0000-0002-3010-9395")$`0000-0002-3010-9395`$`affiliation-group`$summaries
)
install.packages("tidyverse")
install.packages("pkgsearch")
?brief_entries
?twentyseconds()
vitae::hyndman()
?hyndman
install.packages(pagedown)
install.packages("pagedown")
pagedown::html_resume()
data-icon
rmarkdown::html_dependency_font_awesome()$version
update.packages("rmarkdown")
rmarkdown::html_dependency_font_awesome()$version
update.packages(rmarkdown)
?scholar
library("scholar")
?scholar
scholar::get_citation_history(cogphLkAAAAJ&)
scholar::get_citation_history("cogphLkAAAAJ&")
cites=scholar::get_citation_history("cogphLkAAAAJ&")
sum(cites$cites)
scholar::get_profile("cogphLkAAAAJ&")
library(scholar)
cites = scholar::get_profile("cogphLkAAAAJ&")
citation
"citation"
print("citation")
echo(hello)
"citations"
paste("citations")
paste("citations"&cites$total_cites)
paste(cites$total_cites)
paste
?paste()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(scholar)
cites = scholar::get_profile("cogphLkAAAAJ&")
.break-after-me {
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(scholar)
cites = scholar::get_profile("cogphLkAAAAJ&")
.break-after-me{
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(scholar)
cites = scholar::get_profile("cogphLkAAAAJ&")
break-after-me {
.break-after-me {
break-after: page;
}
library("pagedown")
.break-after-me {
break-after: page;
}
.break-after-me
clear
clear()
install.packages(opts_knit)
install.packages("opts_knit")
knit_with_parameters('~/Documents/Ryan Eckert/CV/rmd_CV/eckertCV.Rmd')
unlink('Documents/Ryan Eckert/CV/rmd_CV/eckertCV_cache', recursive = TRUE)
xaringan::inf_mr()
install.packages("xaringan")
xaringan::inf_mr()
xaringan::inf_mr()
icon::ai("academia")
install.packages(icon)
install.packages("icon")
devtools::install_github("ropenscilabs/icon")
rmarkdown::pandoc_version()
unlink('Documents/GitHub/cv/Untitled_cache', recursive = TRUE)
devtools::install_github('RLesur/Rcade')
library(icon)
icon::ai_google_scholar()
?ai
library(Rcade)
Rcade::games
?Rcade
??Rcade
?Rcade()
?Rcade::games()
games$Mariohtml5
games$`Mariohtml5`
games$`PACMAN`
games$`Pacman`
wget()
library(Rcade)
games$`2048`
games$SpiderSolitaire
update.packages(devtools)
update.packages("devtools")
games$SpiderSolitaire
wget https://github.com/RcadeRepos/fSpider/archive/master.zip --no-check-certificate
?wget()
library("devtools")
games$SpiderSolitaire
?utils::download.file()
update_packages(utils)
update_packages("utils")
games$SpiderSolitaire
library(Rcade)
games$`2048`
games$Pacman
?utils
R.version()
R.version
repos
repos()
2048
`2048`
devtools::install_github('RLesur/Rcade')
devtools::install_github('RLesur/Rcade', force = TRUE)
games$Pacman
download.file(https://github.com/RcadeRepos/pacman/archive/master.zip)
download.file("https://github.com/RcadeRepos/pacman/archive/master.zip")
games$Pacman
pwd
getwd()
setwd(~/)
setwd("~/")
library(Rcade)
games$Pacman
library(Rccade)
library(Rcade)
games$`2048`
games$`2048`
games$`2048`
games$`2048`
install.packages(c("BiocManager", "bookdown", "car", "classInt", "data.table", "DescTools", "DT", "effects", "glmnet", "haven", "Hmisc", "hms", "jomo", "jpeg", "mgcv", "nlme", "openxlsx", "pagedown", "quantreg", "rgdal", "roxygen2", "rvcheck", "rvest", "slam", "sp", "spam", "survival", "testthat"))
games$Pacman
library("Rcade", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
games$Pacman
View(games)
games[["Pacman"]]
body(environment(games[["Pacman"]][["install"]])[["self"]][["install"]])[[3]][[3]][[2]]
setInternet2(use=T)
utils
setInternet2(use=T)
setInternet2()
download.file("https://github.com/RcadeRepos/pacman/archive/master.zip", method = "wget", extra = getOption("--no-check-certificate")
)
(nzchar(Sys.which("wget")[1]))
aliases <- readRDS("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/Rcade/help/aliases.rds")
aliases
paths <- readRDS("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/Rcade/help/paths.rds")
paths
games$BoulderDash
games$Pacman
install.packages(Rcade)
install.packages("devtools")
devtools::install_github('RLesur/Rcade')
games$Pacman
library(Rcade)
games$Pacman
R.version
install.packages(pagedown)
remotes::install_github('rstudio/pagedown')
install.packages(scholar)
install.packages("scholar")
install.packages(icon)
install.packages("icon")
devtools::install_github("ropenscilabs/icon")
library(Rcade)
games$`2048`
games$`2048`
games$`2048`
games$Mariohtml5
its2ColPal=c("#0081EF", "#00B0F6", "#00BFC4", "#39B600", "#9590FF", "#E76BF3", "#FF62BC",
"#F8766D", "#D89000", "#A3A500")
#This is what the palette looks like in sequence
pie(rep(1,length(its2ColPal)), col = its2ColPal)
head(its2meta)
curated_result_97 = readRDS("curated_result_97.rds") #read in LULU output
its2meta = read.table("CBC_MCAV_sampling_metadata.txt", header = TRUE) #read in metadata
head(its2meta)
its2dada = t(read.table("ASVtable.txt"))
its2dada = cbind(its2meta[1:3],its2dada, row.names = NULL)
curated_result_97 = readRDS("curated_result_97.rds") #read in LULU output
its2meta = read.table("CBC_MCAV_sampling_metadata.txt", header = TRUE) #read in metadata
If you download my entire accompanying github directory you should be able to re-run these analyses by following along with the code chunks in R Studio. If you download the code separtely or you are using this pipeline on your own data, you may need to change the working directory to where the associated files are housed (ie. ```setwd("~/path/to/directory/with/data")```).
setwd("~/Documents/GitHub/Symbiodiniaceae-ITS2/stats/")
curated_result_97 = readRDS("curated_result_97.rds") #read in LULU output
its2meta = read.table("CBC_MCAV_sampling_metadata.txt", header = TRUE) #read in metadata
head(its2meta)
its2dada = t(read.table("ASVtable.txt"))
its2dada = cbind(its2meta[1:3],its2dada, row.names = NULL)
names(its2dada)[1:3]<-paste(c("Sample","Site","Depth"))
head(its2dada)
ITS2data = cbind(its2dada[, 1:3], data.frame(t(curated_result_97$curated_table)), row.names = NULL)
head(ITS2data)
ITS2data$Depth = factor(ITS2data$Depth, levels = c("10", "16", "25", "35"))
levels(ITS2data$Site)
ITS2data$Site = factor(ITS2data$Site, levels(ITS2data$Site)[c(4, 2, 3, 1)])
ITS2data = ITS2data[order(ITS2data$Site, ITS2data$Depth), ]
ITS2data$newOrder = 1:nrow(ITS2data)
ITS2data = cbind(ITS2data[, length(ITS2data), drop = FALSE],
ITS2data[, c(1:length(ITS2data) - 1)])
head(ITS2data)
goods = purgeOutliers(ITS2data, count.columns = 5:length(ITS2data), otu.cut = 0.001)
goods$newOrder = 1:nrow(goods)
head(goods)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("BiocManager", "car", "cluster", "dunn.test", "edgeR", "ggpubr", "labdsv",
"MCMC.OTU", "multcompView", "pgirmess", "plyr", "poppr", "reshape", "vegan")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!require("edgeR")){BiocManager::install("edgeR", update = FALSE)
library(edgeR)}
goods = purgeOutliers(ITS2data, count.columns = 5:length(ITS2data), otu.cut = 0.001)
goods$newOrder = 1:nrow(goods)
head(goods)
props = apply(goods[, 5:length(goods[1, ])], 2, function(x) {
sum(x) / sum(goods[, 5:length(goods[1, ])])
})
props
props = as.data.frame(props)
barplot(props$props, log = "y", names.arg = rownames(props),
xlab = "Sequence", ylab = "Proportion", col = its2ColPal)
itsGoodsTransposed = t(goods[, 5:length(goods[1, ])])
itsGoodsList = DGEList(counts = itsGoodsTransposed)
head(itsGoodsList$samples)
its2Norm =  calcNormFactors(itsGoodsList, method = "TMM")
head(its2Norm$samples)
its2TMM = t(cpm(its2Norm, normalized.lib.sizes = TRUE))
its2Norm = cbind(goods[,c(2:4)], its2TMM)
head(its2Norm)
colnames(its2Norm)[4:ncol(its2Norm)] = c("sq01_C3", "sq10_C3", "sq11_C3g", "sq14_C3g",
"sq17_C3g", "sq18_C3g", "sq25_C3g", "sq05_C3z",
"sq07_C3e", "sq08_C3g")
head(its2Norm)
levels(its2Norm$Site)
levels(its2Norm$Depth)
its2Richness = specnumber(its2Norm[,4:ncol(its2Norm)])
its2Shannon = diversity(its2Norm[,4:ncol(its2Norm)],index = "shannon")
its2Simpson = diversity(its2Norm[,4:ncol(its2Norm)],index = "simpson")
its2Div = cbind(its2Norm[,1:3], its2Richness, its2Shannon, its2Simpson)
colnames(its2Div)[4:6] = c("richness", "shannon", "simpson")
head(its2Div)
set.seed(694)
its2Nmds = metaMDS(its2Norm[4:ncol(its2Norm)], try = 50, autotransform = FALSE)
its2Nmds
its2Scores = as.data.frame(scores(its2Nmds))
its2Scores$site = factor(its2Norm$Site)
its2Scores$depth = as.factor(its2Norm$Depth)
its2Scores$sample = row.names(its2Scores)
head(its2Scores)
its2Clades = as.data.frame(scores(its2Nmds,"species"))
its2Clades$seq = row.names(its2Clades)
its2Clades
its2Clades$seq
its2NmdsPlotA = ggplot() +
geom_point(data = its2Scores, aes(x = NMDS1, y = NMDS2,
shape = depth, size = depth, fill = site),
color = "black") + # add the site points
scale_fill_manual(values = its2ColPal[c(8,5,3,9)],
name = "Reef Site", labels = c("Tobacco Reef",
"Raph's Wall", "South Reef", "Glover's Reef")) +
scale_shape_manual(values = c(24, 23, 22, 21), name = "Depth",
labels = c("10 m", "16 m", "25 m", "35 m")) +
scale_size_manual(values = c(3, 3.75, 3.75, 3.75)) +
guides(shape = guide_legend( override.aes = list(size =
c(3, 3.75, 3.75, 3.75), fill = "white")), fill =
guide_legend(override.aes = list(shape = 22, size = 3.75,
color = NA)), size = FALSE)+
geom_text(data = its2Clades, aes(x = NMDS1, y = NMDS2,
label = seq),
color = "#000000", size = 4, fontface = "italic") +
# add seq labels
annotate("label", x = 1.25, y = 0.725, label = paste
("Distance = Bray-Curtis\nStress = ",
round(its2Nmds$stress, 4), sep = ""), size = 4) +
labs(x = "nMDS1", y = "nMDS2") +
coord_equal() +
theme_bw()
its2NmdsPlot = its2NmdsPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
legend.background = element_blank(),
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_blank()
)
its2NmdsPlot
?metaMDS
its2Nmds = metaMDS(sqrt(its2Norm[4:ncol(its2Norm)]), try = 50)
its2Nmds
its2Nmds = metaMDS(sqrt(its2Norm[4:ncol(its2Norm)]), try = 50, autotransform = FALSE)
its2Scores = as.data.frame(scores(its2Nmds))
its2Scores$site = factor(its2Norm$Site)
its2Scores$depth = as.factor(its2Norm$Depth)
its2Scores$sample = row.names(its2Scores)
head(its2Scores)
its2Clades = as.data.frame(scores(its2Nmds,"species"))
its2Clades$seq = row.names(its2Clades)
its2Clades
its2Clades$seq
```
<br>
##Construct nMDS biplot
```{r, nmds biplot, fig.show = 'hide'}
its2NmdsPlotA = ggplot() +
geom_point(data = its2Scores, aes(x = NMDS1, y = NMDS2,
shape = depth, size = depth, fill = site),
color = "black") + # add the site points
scale_fill_manual(values = its2ColPal[c(8,5,3,9)],
name = "Reef Site", labels = c("Tobacco Reef",
"Raph's Wall", "South Reef", "Glover's Reef")) +
scale_shape_manual(values = c(24, 23, 22, 21), name = "Depth",
labels = c("10 m", "16 m", "25 m", "35 m")) +
scale_size_manual(values = c(3, 3.75, 3.75, 3.75)) +
guides(shape = guide_legend( override.aes = list(size =
c(3, 3.75, 3.75, 3.75), fill = "white")), fill =
guide_legend(override.aes = list(shape = 22, size = 3.75,
color = NA)), size = FALSE)+
geom_text(data = its2Clades, aes(x = NMDS1, y = NMDS2,
label = seq),
color = "#000000", size = 4, fontface = "italic") +
# add seq labels
annotate("label", x = 1.25, y = 0.725, label = paste
("Distance = Bray-Curtis\nStress = ",
round(its2Nmds$stress, 4), sep = ""), size = 4) +
labs(x = "nMDS1", y = "nMDS2") +
coord_equal() +
theme_bw()
its2NmdsPlot = its2NmdsPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "right",
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
legend.key = element_blank(),
legend.background = element_blank(),
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_blank()
)
its2NmdsPlot
its2Nmds = metaMDS(wisconson(sqrt(its2Norm[4:ncol(its2Norm)]), try = 50, autotransform = FALSE)
q
its2Nmds = metaMDS(wisconson(sqrt(its2Norm[4:ncol(its2Norm)])), try = 50, autotransform = FALSE)
?wisconson
Rcade
library(Rcade)
games$BoulderDash
games$SURVIVOR
games$Mariohtml5
